// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-powered model recommendations to brands based on their project requirements and past successes.
 *
 * - getModelRecommendations - A function that takes project details and brand history as input and returns a list of recommended models.
 * - ModelRecommendationsInput - The input type for the getModelRecommendations function.
 * - ModelRecommendationsOutput - The return type for the getModelRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Input schema for the model recommendations flow
const ModelRecommendationsInputSchema = z.object({
  projectDetails: z
    .string()
    .describe('Detailed description of the project requirements, including the type of campaign, desired model attributes, and specific needs.'),
  brandHistory: z
    .string()
    .describe('A summary of the brand past projects, successful campaigns, and preferred model types.'),
});
export type ModelRecommendationsInput = z.infer<typeof ModelRecommendationsInputSchema>;

// Output schema for the model recommendations flow
const ModelRecommendationsOutputSchema = z.object({
  recommendedModels: z
    .array(z.string())
    .describe('A list of model names or identifiers that are recommended for the project.'),
  reasoning: z
    .string()
    .describe('Explanation of why these models are recommended based on the project details and brand history.'),
});
export type ModelRecommendationsOutput = z.infer<typeof ModelRecommendationsOutputSchema>;

// Wrapper function to call the model recommendations flow
export async function getModelRecommendations(input: ModelRecommendationsInput): Promise<ModelRecommendationsOutput> {
  return modelRecommendationsFlow(input);
}

// Define the prompt for generating model recommendations
const modelRecommendationsPrompt = ai.definePrompt({
  name: 'modelRecommendationsPrompt',
  input: {schema: ModelRecommendationsInputSchema},
  output: {schema: ModelRecommendationsOutputSchema},
  prompt: `You are an AI assistant specialized in providing model recommendations to brands for their marketing campaigns.

  Based on the following project details and brand history, recommend a list of suitable models and explain your reasoning.

  Project Details: {{{projectDetails}}}
  Brand History: {{{brandHistory}}}

  {{#if recommendedModels}}
  Recommended Models:
  {{#each recommendedModels}}
  - {{{this}}}
  {{/each}}
  {{else}}
  No models found.
  {{/if}}

  Reasoning: {{{reasoning}}}
  `,
});

// Define the Genkit flow for model recommendations
const modelRecommendationsFlow = ai.defineFlow(
  {
    name: 'modelRecommendationsFlow',
    inputSchema: ModelRecommendationsInputSchema,
    outputSchema: ModelRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await modelRecommendationsPrompt(input);
    return output!;
  }
);
